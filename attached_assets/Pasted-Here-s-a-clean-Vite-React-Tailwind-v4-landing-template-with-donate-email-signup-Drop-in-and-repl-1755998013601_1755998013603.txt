Hereâ€™s a clean, Vite+React+Tailwind v4 landing template with donate + email signup. Drop in and replace placeholders. No config edits required.

File tree
index.html
src/main.tsx
src/App.tsx
src/styles.css
public/favicon.svg

index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>SkateHubba â€” Own Your Tricks</title>
    <meta name="description" content="Play SKATE anywhere. Check in at legendary spots. Own your tricks." />
    <link rel="icon" href="/favicon.svg" />
  </head>
  <body class="bg-white text-gray-900">
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

src/styles.css
@import "tailwindcss";

/* optional brand tweaks */
:root { --brand: 24 95% 50%; }        /* orange */
.btn { @apply inline-flex items-center justify-center rounded-xl px-4 py-2 text-sm font-medium transition border border-gray-200; }
.btn-primary { @apply bg-black text-white hover:bg-gray-900; }
.btn-ghost { @apply bg-white hover:bg-gray-50; }
.card { @apply rounded-2xl border border-gray-200 bg-white/80 backdrop-blur p-6 shadow-sm; }

src/main.tsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import './styles.css'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <React.StrictMode><App /></React.StrictMode>
)

src/App.tsx
import { useState } from "react";

const DONATE_STRIPE = import.meta.env.VITE_DONATE_STRIPE_URL || "#";
const DONATE_PAYPAL = import.meta.env.VITE_DONATE_PAYPAL_URL || "#";

export default function App() {
  return (
    <div>
      <Header />
      <Hero />
      <SocialProof />
      <Features />
      <Donate />
      <Signup />
      <Footer />
    </div>
  );
}

function Header() {
  return (
    <header className="sticky top-0 z-40 bg-white/80 backdrop-blur border-b border-gray-200">
      <nav className="mx-auto max-w-6xl px-4 h-16 flex items-center justify-between">
        <a href="/" className="flex items-center gap-2 font-extrabold tracking-tight">
          <span className="text-2xl">ðŸ›¹</span>
          <span>SkateHubba</span>
        </a>
        <div className="hidden sm:flex items-center gap-2">
          <a href="#features" className="btn btn-ghost">Features</a>
          <a href="#donate" className="btn btn-ghost">Donate</a>
          <a href="#signup" className="btn btn-primary">Join the beta</a>
        </div>
      </nav>
    </header>
  );
}

function Hero() {
  return (
    <section className="mx-auto max-w-6xl px-4 py-16 sm:py-24">
      <div className="grid lg:grid-cols-2 gap-10 items-center">
        <div>
          <h1 className="text-4xl sm:text-5xl font-extrabold leading-tight">
            Own Your Tricks. <span className="text-gray-500">Play SKATE anywhere.</span>
          </h1>
          <p className="mt-4 text-gray-600">
            Remote SKATE battles. Legendary spot check-ins. Live lobbies. Built for core skaters.
          </p>
          <div className="mt-6 flex flex-wrap gap-3">
            <a href="#donate" className="btn btn-primary">Donate</a>
            <a href="#signup" className="btn">Get beta access</a>
          </div>
          <ul className="mt-6 text-sm text-gray-500 space-y-1">
            <li>â€¢ 24-hr trick reply window</li>
            <li>â€¢ Spot check-ins with bonus points</li>
            <li>â€¢ Identity verification for pros</li>
          </ul>
        </div>
        <div className="card">
          <video
            src=""
            controls
            poster="https://placehold.co/800x500/png"
            className="w-full rounded-xl"
          />
          <p className="mt-3 text-xs text-gray-500">Teaser: SKATE challenge flow</p>
        </div>
      </div>
    </section>
  );
}

function SocialProof() {
  return (
    <section className="border-y border-gray-200 bg-gray-50">
      <div className="mx-auto max-w-6xl px-4 py-8 flex flex-wrap items-center gap-6 justify-center">
        <span className="text-xs uppercase tracking-widest text-gray-500">Backed by skaters from</span>
        <div className="flex gap-6 opacity-70">
          <span className="text-sm">Baker</span>
          <span className="text-sm">Shake Junt</span>
          <span className="text-sm">Emerica</span>
          <span className="text-sm">The Berrics</span>
        </div>
      </div>
    </section>
  );
}

function Features() {
  const items = [
    { title: "Remote SKATE", desc: "Challenge friends. 24-hr reply window. Video-based proof." },
    { title: "Legendary spots", desc: "Check in at hubs. Earn multipliers for iconic locations." },
    { title: "Live lobbies", desc: "Spectate solo sessions or head-to-head battles." },
  ];
  return (
    <section id="features" className="mx-auto max-w-6xl px-4 py-16">
      <h2 className="text-2xl font-bold">Core features</h2>
      <div className="mt-6 grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {items.map((it) => (
          <div key={it.title} className="card">
            <h3 className="font-semibold">{it.title}</h3>
            <p className="mt-2 text-sm text-gray-600">{it.desc}</p>
          </div>
        ))}
      </div>
    </section>
  );
}

function Donate() {
  return (
    <section id="donate" className="mx-auto max-w-6xl px-4 py-16">
      <div className="grid lg:grid-cols-2 gap-6">
        <div className="card">
          <h2 className="text-xl font-bold">Support the build</h2>
          <p className="mt-2 text-sm text-gray-600">Your donation keeps the beta moving and servers online.</p>
          <div className="mt-6 grid grid-cols-2 sm:grid-cols-3 gap-3">
            <a className="btn btn-primary" href={DONATE_STRIPE}>Stripe</a>
            <a className="btn" href={DONATE_PAYPAL}>PayPal</a>
            <a className="btn" href="#donate-crypto">Crypto</a>
          </div>
          <p className="mt-3 text-xs text-gray-500">Set <code>VITE_DONATE_STRIPE_URL</code> and <code>VITE_DONATE_PAYPAL_URL</code> in env.</p>
        </div>
        <div id="donate-crypto" className="card">
          <h3 className="font-semibold">Crypto</h3>
          <div className="mt-3 space-y-2 text-sm">
            <CopyLine label="BTC" value="bc1-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
            <CopyLine label="ETH" value="0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" />
            <CopyLine label="SOL" value="SoLxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
          </div>
        </div>
      </div>
    </section>
  );
}

function Signup() {
  const [status, setStatus] = useState<"idle"|"ok"|"err"|"loading">("idle");

  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setStatus("loading");
    const form = new FormData(e.currentTarget);
    const payload = Object.fromEntries(form.entries());
    try {
      const r = await fetch("/api/subscribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      setStatus(r.ok ? "ok" : "err");
    } catch {
      setStatus("err");
    }
  }

  return (
    <section id="signup" className="mx-auto max-w-6xl px-4 py-16">
      <div className="card">
        <h2 className="text-xl font-bold">Get beta access</h2>
        <p className="mt-2 text-sm text-gray-600">Join the list for early invites and session drops.</p>
        <form onSubmit={onSubmit} className="mt-4 grid sm:grid-cols-[1fr_auto] gap-3">
          <input name="email" type="email" required placeholder="you@example.com"
                 className="w-full rounded-xl border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-black" />
          <button className="btn btn-primary" type="submit" disabled={status==="loading"}>
            {status==="loading" ? "Submittingâ€¦" : "Notify me"}
          </button>
        </form>
        {status==="ok" && <p className="mt-2 text-sm text-green-600">You're on the list.</p>}
        {status==="err" && <p className="mt-2 text-sm text-red-600">Signup failed. Try again.</p>}
        <p className="mt-3 text-xs text-gray-500">Or use Formspree: set <code>action</code> on the form.</p>
      </div>
    </section>
  );
}

function Footer() {
  return (
    <footer className="border-t border-gray-200">
      <div className="mx-auto max-w-6xl px-4 py-8 flex flex-col sm:flex-row items-center justify-between gap-4">
        <p className="text-sm text-gray-500">Â© {new Date().getFullYear()} SkateHubba</p>
        <div className="flex gap-4 text-sm">
          <a href="https://linkedin.com/in/jason-hamilton-skatehubba" className="text-gray-600 hover:underline">LinkedIn</a>
          <a href="/privacy" className="text-gray-600 hover:underline">Privacy</a>
          <a href="/terms" className="text-gray-600 hover:underline">Terms</a>
        </div>
      </div>
    </footer>
  );
}

function CopyLine({ label, value }: { label: string; value: string }) {
  const [copied, setCopied] = useState(false);
  return (
    <div className="flex items-center justify-between rounded-lg border border-gray-200 px-3 py-2">
      <span className="text-gray-600">{label}</span>
      <button
        type="button"
        className="text-xs underline"
        onClick={async () => { await navigator.clipboard.writeText(value); setCopied(true); setTimeout(()=>setCopied(false), 1200); }}
        aria-label={`Copy ${label} address`}
        title={value}
      >
        {copied ? "Copied" : "Copy"}
      </button>
    </div>
  );
}

Minimal server endpoint (optional)
// server/subscribe.js
import express from "express";
const router = express.Router();

router.post("/subscribe", async (req, res) => {
  const { email } = req.body || {};
  if (!email || !/.+@.+\..+/.test(email)) return res.status(400).json({ ok:false });
  // TODO: store in DB or forward to Mailchimp/Resend
  return res.json({ ok: true });
});

export default router;


Deployment notes:

Use only standard Tailwind utilities. No border-border.

Env: set VITE_DONATE_STRIPE_URL and VITE_DONATE_PAYPAL_URL.

If you lack a backend, set the form action to Formspree temporarily.