) Use the automatic JSX runtime

Update tsconfig.json.

{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "types": ["vite/client"],
    "baseUrl": ".",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true
  },
  "include": ["src"]
}


Now you do not need import React from "react" anywhere.

2) Remove added default React imports

One-shot cleanup:

# delete default React imports while keeping named hooks
grep -rl --include='*.tsx' --include='*.ts' 'import React' src | xargs sed -i 's/^import React[^;]*;//'
# fix duplicates like "useState" imported twice
npx eslint --ext .ts,.tsx --fix . || true

3) Convert broken aliases to relative paths

You said you cannot edit vite.config.ts, so stop using @/... or absolute aliases. Run this codemod to rewrite imports to relative from each file.

Create scripts/relativize-imports.mjs:

import fs from "node:fs";
import path from "node:path";

const SRC = path.resolve("src");
const exts = new Set([".ts", ".tsx"]);

function listFiles(dir) {
  return fs.readdirSync(dir, { withFileTypes: true }).flatMap(d => {
    const p = path.join(dir, d.name);
    return d.isDirectory() ? listFiles(p) : exts.has(path.extname(p)) ? [p] : [];
  });
}

function relativize(spec, fromFile) {
  // Handle @/x or src/x to relative
  let target = spec;
  if (spec.startsWith("@/")) target = path.join(SRC, spec.slice(2));
  else if (spec.startsWith("src/")) target = path.join(SRC, spec.slice(4));
  else return null; // leave non-alias imports

  // Add extension resolution candidates for TS
  const withExt = fs.existsSync(target) ? target
    : [".ts", ".tsx", ".js", ".jsx", "/index.ts", "/index.tsx"]
      .map(suf => target + suf).find(fs.existsSync);

  if (!withExt) return null;

  let rel = path.relative(path.dirname(fromFile), withExt).replaceAll("\\", "/");
  if (!rel.startsWith(".")) rel = "./" + rel;
  // strip extension for Vite
  return rel.replace(/(\.tsx?|\.jsx?)$/, "");
}

for (const file of listFiles(SRC)) {
  let text = fs.readFileSync(file, "utf8");
  const before = text;

  text = text.replace(
    /from\s+["']([^"']+)["']/g,
    (m, spec) => {
      const r = relativize(spec, file);
      return r ? `from "${r}"` : m;
    }
  );

  if (text !== before) {
    fs.writeFileSync(file, text);
    console.log("updated", path.relative(".", file));
  }
}


Run:

node scripts/relativize-imports.mjs

4) Quick sanity fixes
# ensure hooks/components point is correct after moves
npx tsc -p tsconfig.json --noEmit


If you still see errors like “Cannot find module '../components/ui/button'” then your file moved. Adjust those few by hand. The codemod covers 90%+.

5) Rebuild and serve
npm run build
npm start   # your Express serves dist on :3000

Notes for the errors you showed

In home.tsx you had both import { useState } from "react" and import React, { useState } from "react". Keep only import { useState } from "react" or remove both if not used. With jsx: react-jsx you never need the default React import.

Keep import order consistent. Components then hooks then libs.